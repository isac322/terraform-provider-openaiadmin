// Code generated by MockGen. DO NOT EDIT.
// Source: project_service_account_service.go
//
// Generated by this command:
//
//	mockgen -package openai -destination mock_project_service_account_service.go -source project_service_account_service.go -typed
//

// Package openai is a generated GoMock package.
package openai

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProjectServiceAccountService is a mock of ProjectServiceAccountService interface.
type MockProjectServiceAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockProjectServiceAccountServiceMockRecorder
	isgomock struct{}
}

// MockProjectServiceAccountServiceMockRecorder is the mock recorder for MockProjectServiceAccountService.
type MockProjectServiceAccountServiceMockRecorder struct {
	mock *MockProjectServiceAccountService
}

// NewMockProjectServiceAccountService creates a new mock instance.
func NewMockProjectServiceAccountService(ctrl *gomock.Controller) *MockProjectServiceAccountService {
	mock := &MockProjectServiceAccountService{ctrl: ctrl}
	mock.recorder = &MockProjectServiceAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectServiceAccountService) EXPECT() *MockProjectServiceAccountServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProjectServiceAccountService) Create(ctx context.Context, projectID, name string, role ProjectServiceAccountRole) (*ProjectServiceAccountWithAPIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, projectID, name, role)
	ret0, _ := ret[0].(*ProjectServiceAccountWithAPIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProjectServiceAccountServiceMockRecorder) Create(ctx, projectID, name, role any) *MockProjectServiceAccountServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProjectServiceAccountService)(nil).Create), ctx, projectID, name, role)
	return &MockProjectServiceAccountServiceCreateCall{Call: call}
}

// MockProjectServiceAccountServiceCreateCall wrap *gomock.Call
type MockProjectServiceAccountServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectServiceAccountServiceCreateCall) Return(arg0 *ProjectServiceAccountWithAPIKey, arg1 error) *MockProjectServiceAccountServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectServiceAccountServiceCreateCall) Do(f func(context.Context, string, string, ProjectServiceAccountRole) (*ProjectServiceAccountWithAPIKey, error)) *MockProjectServiceAccountServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectServiceAccountServiceCreateCall) DoAndReturn(f func(context.Context, string, string, ProjectServiceAccountRole) (*ProjectServiceAccountWithAPIKey, error)) *MockProjectServiceAccountServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockProjectServiceAccountService) Delete(ctx context.Context, projectID, serviceAccountID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, projectID, serviceAccountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProjectServiceAccountServiceMockRecorder) Delete(ctx, projectID, serviceAccountID any) *MockProjectServiceAccountServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProjectServiceAccountService)(nil).Delete), ctx, projectID, serviceAccountID)
	return &MockProjectServiceAccountServiceDeleteCall{Call: call}
}

// MockProjectServiceAccountServiceDeleteCall wrap *gomock.Call
type MockProjectServiceAccountServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectServiceAccountServiceDeleteCall) Return(arg0 error) *MockProjectServiceAccountServiceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectServiceAccountServiceDeleteCall) Do(f func(context.Context, string, string) error) *MockProjectServiceAccountServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectServiceAccountServiceDeleteCall) DoAndReturn(f func(context.Context, string, string) error) *MockProjectServiceAccountServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockProjectServiceAccountService) List(ctx context.Context, projectID string) ([]ProjectServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, projectID)
	ret0, _ := ret[0].([]ProjectServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockProjectServiceAccountServiceMockRecorder) List(ctx, projectID any) *MockProjectServiceAccountServiceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockProjectServiceAccountService)(nil).List), ctx, projectID)
	return &MockProjectServiceAccountServiceListCall{Call: call}
}

// MockProjectServiceAccountServiceListCall wrap *gomock.Call
type MockProjectServiceAccountServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectServiceAccountServiceListCall) Return(arg0 []ProjectServiceAccount, arg1 error) *MockProjectServiceAccountServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectServiceAccountServiceListCall) Do(f func(context.Context, string) ([]ProjectServiceAccount, error)) *MockProjectServiceAccountServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectServiceAccountServiceListCall) DoAndReturn(f func(context.Context, string) ([]ProjectServiceAccount, error)) *MockProjectServiceAccountServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Retrieve mocks base method.
func (m *MockProjectServiceAccountService) Retrieve(ctx context.Context, projectID, serviceAccountID string) (*ProjectServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve", ctx, projectID, serviceAccountID)
	ret0, _ := ret[0].(*ProjectServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve.
func (mr *MockProjectServiceAccountServiceMockRecorder) Retrieve(ctx, projectID, serviceAccountID any) *MockProjectServiceAccountServiceRetrieveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockProjectServiceAccountService)(nil).Retrieve), ctx, projectID, serviceAccountID)
	return &MockProjectServiceAccountServiceRetrieveCall{Call: call}
}

// MockProjectServiceAccountServiceRetrieveCall wrap *gomock.Call
type MockProjectServiceAccountServiceRetrieveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectServiceAccountServiceRetrieveCall) Return(arg0 *ProjectServiceAccount, arg1 error) *MockProjectServiceAccountServiceRetrieveCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectServiceAccountServiceRetrieveCall) Do(f func(context.Context, string, string) (*ProjectServiceAccount, error)) *MockProjectServiceAccountServiceRetrieveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectServiceAccountServiceRetrieveCall) DoAndReturn(f func(context.Context, string, string) (*ProjectServiceAccount, error)) *MockProjectServiceAccountServiceRetrieveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

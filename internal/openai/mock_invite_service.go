// Code generated by MockGen. DO NOT EDIT.
// Source: invite_service.go
//
// Generated by this command:
//
//	mockgen -package openai -destination mock_invite_service.go -source invite_service.go -typed
//

// Package openai is a generated GoMock package.
package openai

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInviteService is a mock of InviteService interface.
type MockInviteService struct {
	ctrl     *gomock.Controller
	recorder *MockInviteServiceMockRecorder
	isgomock struct{}
}

// MockInviteServiceMockRecorder is the mock recorder for MockInviteService.
type MockInviteServiceMockRecorder struct {
	mock *MockInviteService
}

// NewMockInviteService creates a new mock instance.
func NewMockInviteService(ctrl *gomock.Controller) *MockInviteService {
	mock := &MockInviteService{ctrl: ctrl}
	mock.recorder = &MockInviteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInviteService) EXPECT() *MockInviteServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInviteService) Create(ctx context.Context, email string, role InviteRole) (*Invite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, email, role)
	ret0, _ := ret[0].(*Invite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockInviteServiceMockRecorder) Create(ctx, email, role any) *MockInviteServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInviteService)(nil).Create), ctx, email, role)
	return &MockInviteServiceCreateCall{Call: call}
}

// MockInviteServiceCreateCall wrap *gomock.Call
type MockInviteServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInviteServiceCreateCall) Return(arg0 *Invite, arg1 error) *MockInviteServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInviteServiceCreateCall) Do(f func(context.Context, string, InviteRole) (*Invite, error)) *MockInviteServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInviteServiceCreateCall) DoAndReturn(f func(context.Context, string, InviteRole) (*Invite, error)) *MockInviteServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockInviteService) Delete(ctx context.Context, inviteID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, inviteID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockInviteServiceMockRecorder) Delete(ctx, inviteID any) *MockInviteServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInviteService)(nil).Delete), ctx, inviteID)
	return &MockInviteServiceDeleteCall{Call: call}
}

// MockInviteServiceDeleteCall wrap *gomock.Call
type MockInviteServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInviteServiceDeleteCall) Return(arg0 error) *MockInviteServiceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInviteServiceDeleteCall) Do(f func(context.Context, string) error) *MockInviteServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInviteServiceDeleteCall) DoAndReturn(f func(context.Context, string) error) *MockInviteServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockInviteService) List(ctx context.Context) ([]Invite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]Invite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockInviteServiceMockRecorder) List(ctx any) *MockInviteServiceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockInviteService)(nil).List), ctx)
	return &MockInviteServiceListCall{Call: call}
}

// MockInviteServiceListCall wrap *gomock.Call
type MockInviteServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInviteServiceListCall) Return(arg0 []Invite, arg1 error) *MockInviteServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInviteServiceListCall) Do(f func(context.Context) ([]Invite, error)) *MockInviteServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInviteServiceListCall) DoAndReturn(f func(context.Context) ([]Invite, error)) *MockInviteServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Retrieve mocks base method.
func (m *MockInviteService) Retrieve(ctx context.Context, inviteID string) (*Invite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve", ctx, inviteID)
	ret0, _ := ret[0].(*Invite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve.
func (mr *MockInviteServiceMockRecorder) Retrieve(ctx, inviteID any) *MockInviteServiceRetrieveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockInviteService)(nil).Retrieve), ctx, inviteID)
	return &MockInviteServiceRetrieveCall{Call: call}
}

// MockInviteServiceRetrieveCall wrap *gomock.Call
type MockInviteServiceRetrieveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInviteServiceRetrieveCall) Return(arg0 *Invite, arg1 error) *MockInviteServiceRetrieveCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInviteServiceRetrieveCall) Do(f func(context.Context, string) (*Invite, error)) *MockInviteServiceRetrieveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInviteServiceRetrieveCall) DoAndReturn(f func(context.Context, string) (*Invite, error)) *MockInviteServiceRetrieveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

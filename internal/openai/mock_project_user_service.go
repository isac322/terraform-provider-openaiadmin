// Code generated by MockGen. DO NOT EDIT.
// Source: project_user_service.go
//
// Generated by this command:
//
//	mockgen -package openai -destination mock_project_user_service.go -source project_user_service.go -typed
//

// Package openai is a generated GoMock package.
package openai

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProjectUserService is a mock of ProjectUserService interface.
type MockProjectUserService struct {
	ctrl     *gomock.Controller
	recorder *MockProjectUserServiceMockRecorder
	isgomock struct{}
}

// MockProjectUserServiceMockRecorder is the mock recorder for MockProjectUserService.
type MockProjectUserServiceMockRecorder struct {
	mock *MockProjectUserService
}

// NewMockProjectUserService creates a new mock instance.
func NewMockProjectUserService(ctrl *gomock.Controller) *MockProjectUserService {
	mock := &MockProjectUserService{ctrl: ctrl}
	mock.recorder = &MockProjectUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectUserService) EXPECT() *MockProjectUserServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProjectUserService) Create(ctx context.Context, projectID, userID string, role ProjectUserRole) (*ProjectUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, projectID, userID, role)
	ret0, _ := ret[0].(*ProjectUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProjectUserServiceMockRecorder) Create(ctx, projectID, userID, role any) *MockProjectUserServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProjectUserService)(nil).Create), ctx, projectID, userID, role)
	return &MockProjectUserServiceCreateCall{Call: call}
}

// MockProjectUserServiceCreateCall wrap *gomock.Call
type MockProjectUserServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectUserServiceCreateCall) Return(arg0 *ProjectUser, arg1 error) *MockProjectUserServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectUserServiceCreateCall) Do(f func(context.Context, string, string, ProjectUserRole) (*ProjectUser, error)) *MockProjectUserServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectUserServiceCreateCall) DoAndReturn(f func(context.Context, string, string, ProjectUserRole) (*ProjectUser, error)) *MockProjectUserServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockProjectUserService) Delete(ctx context.Context, projectID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, projectID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProjectUserServiceMockRecorder) Delete(ctx, projectID, userID any) *MockProjectUserServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProjectUserService)(nil).Delete), ctx, projectID, userID)
	return &MockProjectUserServiceDeleteCall{Call: call}
}

// MockProjectUserServiceDeleteCall wrap *gomock.Call
type MockProjectUserServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectUserServiceDeleteCall) Return(arg0 error) *MockProjectUserServiceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectUserServiceDeleteCall) Do(f func(context.Context, string, string) error) *MockProjectUserServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectUserServiceDeleteCall) DoAndReturn(f func(context.Context, string, string) error) *MockProjectUserServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockProjectUserService) List(ctx context.Context, projectID string) ([]ProjectUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, projectID)
	ret0, _ := ret[0].([]ProjectUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockProjectUserServiceMockRecorder) List(ctx, projectID any) *MockProjectUserServiceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockProjectUserService)(nil).List), ctx, projectID)
	return &MockProjectUserServiceListCall{Call: call}
}

// MockProjectUserServiceListCall wrap *gomock.Call
type MockProjectUserServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectUserServiceListCall) Return(arg0 []ProjectUser, arg1 error) *MockProjectUserServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectUserServiceListCall) Do(f func(context.Context, string) ([]ProjectUser, error)) *MockProjectUserServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectUserServiceListCall) DoAndReturn(f func(context.Context, string) ([]ProjectUser, error)) *MockProjectUserServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Modify mocks base method.
func (m *MockProjectUserService) Modify(ctx context.Context, projectID, userID string, role ProjectUserRole) (*ProjectUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Modify", ctx, projectID, userID, role)
	ret0, _ := ret[0].(*ProjectUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Modify indicates an expected call of Modify.
func (mr *MockProjectUserServiceMockRecorder) Modify(ctx, projectID, userID, role any) *MockProjectUserServiceModifyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Modify", reflect.TypeOf((*MockProjectUserService)(nil).Modify), ctx, projectID, userID, role)
	return &MockProjectUserServiceModifyCall{Call: call}
}

// MockProjectUserServiceModifyCall wrap *gomock.Call
type MockProjectUserServiceModifyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectUserServiceModifyCall) Return(arg0 *ProjectUser, arg1 error) *MockProjectUserServiceModifyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectUserServiceModifyCall) Do(f func(context.Context, string, string, ProjectUserRole) (*ProjectUser, error)) *MockProjectUserServiceModifyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectUserServiceModifyCall) DoAndReturn(f func(context.Context, string, string, ProjectUserRole) (*ProjectUser, error)) *MockProjectUserServiceModifyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Retrieve mocks base method.
func (m *MockProjectUserService) Retrieve(ctx context.Context, projectID, userID string) (*ProjectUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve", ctx, projectID, userID)
	ret0, _ := ret[0].(*ProjectUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve.
func (mr *MockProjectUserServiceMockRecorder) Retrieve(ctx, projectID, userID any) *MockProjectUserServiceRetrieveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockProjectUserService)(nil).Retrieve), ctx, projectID, userID)
	return &MockProjectUserServiceRetrieveCall{Call: call}
}

// MockProjectUserServiceRetrieveCall wrap *gomock.Call
type MockProjectUserServiceRetrieveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectUserServiceRetrieveCall) Return(arg0 *ProjectUser, arg1 error) *MockProjectUserServiceRetrieveCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectUserServiceRetrieveCall) Do(f func(context.Context, string, string) (*ProjectUser, error)) *MockProjectUserServiceRetrieveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectUserServiceRetrieveCall) DoAndReturn(f func(context.Context, string, string) (*ProjectUser, error)) *MockProjectUserServiceRetrieveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Code generated by MockGen. DO NOT EDIT.
// Source: user_service.go
//
// Generated by this command:
//
//	mockgen -package openai -destination mock_user_service.go -source user_service.go -typed
//

// Package openai is a generated GoMock package.
package openai

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockUserService) Delete(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserServiceMockRecorder) Delete(ctx, userID any) *MockUserServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserService)(nil).Delete), ctx, userID)
	return &MockUserServiceDeleteCall{Call: call}
}

// MockUserServiceDeleteCall wrap *gomock.Call
type MockUserServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceDeleteCall) Return(arg0 error) *MockUserServiceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceDeleteCall) Do(f func(context.Context, string) error) *MockUserServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceDeleteCall) DoAndReturn(f func(context.Context, string) error) *MockUserServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockUserService) List(ctx context.Context) ([]User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUserServiceMockRecorder) List(ctx any) *MockUserServiceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserService)(nil).List), ctx)
	return &MockUserServiceListCall{Call: call}
}

// MockUserServiceListCall wrap *gomock.Call
type MockUserServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceListCall) Return(arg0 []User, arg1 error) *MockUserServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceListCall) Do(f func(context.Context) ([]User, error)) *MockUserServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceListCall) DoAndReturn(f func(context.Context) ([]User, error)) *MockUserServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Modify mocks base method.
func (m *MockUserService) Modify(ctx context.Context, userID string, role UserRole) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Modify", ctx, userID, role)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Modify indicates an expected call of Modify.
func (mr *MockUserServiceMockRecorder) Modify(ctx, userID, role any) *MockUserServiceModifyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Modify", reflect.TypeOf((*MockUserService)(nil).Modify), ctx, userID, role)
	return &MockUserServiceModifyCall{Call: call}
}

// MockUserServiceModifyCall wrap *gomock.Call
type MockUserServiceModifyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceModifyCall) Return(arg0 *User, arg1 error) *MockUserServiceModifyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceModifyCall) Do(f func(context.Context, string, UserRole) (*User, error)) *MockUserServiceModifyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceModifyCall) DoAndReturn(f func(context.Context, string, UserRole) (*User, error)) *MockUserServiceModifyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Retrieve mocks base method.
func (m *MockUserService) Retrieve(ctx context.Context, userID string) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve", ctx, userID)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve.
func (mr *MockUserServiceMockRecorder) Retrieve(ctx, userID any) *MockUserServiceRetrieveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockUserService)(nil).Retrieve), ctx, userID)
	return &MockUserServiceRetrieveCall{Call: call}
}

// MockUserServiceRetrieveCall wrap *gomock.Call
type MockUserServiceRetrieveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceRetrieveCall) Return(arg0 *User, arg1 error) *MockUserServiceRetrieveCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceRetrieveCall) Do(f func(context.Context, string) (*User, error)) *MockUserServiceRetrieveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceRetrieveCall) DoAndReturn(f func(context.Context, string) (*User, error)) *MockUserServiceRetrieveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
